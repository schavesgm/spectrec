# -- Template input file

# -- Classes to be registered in the system. Once registered, they can be used in the
# -- configuration files below. If empty, then no class is registered.
to_register:
  # - ['ClassName',     'path_to_class.py']
  # - ['MyFakePeak',    './modules/MyPeak.py']
  # - ['MyFakeKernel',  './modules/MyPeak.py']
  # - ['MyFakeNetwork', './modules/MyPeak.py']

# -- Input information related to the dataset
dataset: {
  id: {
    prefix: '',
    suffix: '',
  },
  parameters: {
    Nb: 2000,
    Nt: 64,
    Ns: 40,
    Nw: 1000,
    wr: [0.0, 8.0],
    mp: 1,
    fp: True,
  },
  generation: {
    # Overwrite the dataset if it already existst
    overwrite: False,
    # File to be used as basis functions; '' means new generation of basis functions
    basis: '',
    # Use the GPU in the computation of the basis functions
    use_GPU: True,
  },
  # Peaks used in the dataset
  peaks: {
    # Peak class and identifier; use classname(:\w+)?. Classes need to be registered
    peaks_used:  ['GaussianPeak:test'],
    limits: {
        Mtest: [0.1,  3.5],
        Atest: [0.1,  1.0],
        Wtest: [0.05, 0.2],
    },
  },
  # Kernel used in the dataset; kernel needs to be registered.
  kernel: 'NRQCDKernel',
}

# -- Define the network to be used in the training
network: {
  # Network to be used in the calculation. Needs to be registered
  type: 'UNet',
  # String identifier of the network
  name: 'test_Ns',
}

# -- Train and validation parameters
train: {
  # Number of examples in the validation dataset
  val_Nb: 2000,
  # Number of validations sets to be used
  num_valid: 2,
  # Number of epochs used in the training step
  epochs: 3,
  # Save every some epochs
  save_every: 10,
  # Log to the console every some iterations
  log_every: 2,
  # Batch size used in the training
  batch_size: 100,
  # Learning rate decay parameter
  lr_decay: 0.95,
  # Use floating point 16 in training to speed up calculations
  fp16: True,
}
